//1  Создать промис, который разрешается через 2 секунды с числом 10.

//2 Создать цепочку промисов, которая выполняет асинхронные операции последовательно.
// a) Создайте функцию loadData, которая возвращает промис, разрешающийся через 1 секунду с числом 5.
// b) Создайте функцию processData, которая принимает число, умножает его на 2 и возвращает результат в новом промисе.
// c) Создайте функцию saveData, которая принимает число, добавляет к нему 3 и возвращает результат в новом промисе.
// Используйте цепочку промисов, вызывая loadData, затем processData, и наконец saveData.

//3 Использовать методы Promise.all и Promise.race для обработки нескольких асинхронных операций.
// a) Создайте две функции, которые возвращают промисы, разрешающиеся через разное время с разными значениями.
// b) Используйте Promise.all для ожидания завершения обеих операций и вывода их результатов.
// c) Используйте Promise.race для определения, какая из операций завершится первой, и вывода результата этой операции.

//4 Учитывая два обещания promise1 и promise2, верните новое обещание. promise1 и promise2 оба будут разрешены с числом. Возвращаемое обещание должно соответствовать сумме двух чисел.
// Input:
// promise1 = new Promise(resolve => setTimeout(() => resolve(2), 20)),
// promise2 = new Promise(resolve => setTimeout(() => resolve(5), 60))
// Output: 7
// Explanation: Два входных обещания разрешаются со значениями 2 и 5 соответственно. Возвращенное обещание должно разрешаться со значением 2 + 5 = 7. Время разрешения возвращенного обещания для этой проблемы не оценивается.

// function sumPromises(promise1, promise2) {
//   //...
// }

// sumPromises(promise1, promise2).then(sum => {
//  console.log(sum);
// });

//1  Создать промис, который разрешается через 2 секунды с числом 10.

//2 Создать цепочку промисов, которая выполняет асинхронные операции последовательно.
// a) Создайте функцию loadData, которая возвращает промис, разрешающийся через 1 секунду с числом 5.
// b) Создайте функцию processData, которая принимает число, умножает его на 2 и возвращает результат в новом промисе.
// c) Создайте функцию saveData, которая принимает число, добавляет к нему 3 и возвращает результат в новом промисе.
// Используйте цепочку промисов, вызывая loadData, затем processData, и наконец saveData.

//3 Использовать методы Promise.all и Promise.race для обработки нескольких асинхронных операций.
// a) Создайте две функции, которые возвращают промисы, разрешающиеся через разное время с разными значениями.
// b) Используйте Promise.all для ожидания завершения обеих операций и вывода их результатов.
// c) Используйте Promise.race для определения, какая из операций завершится первой, и вывода результата этой операции.

//4 Учитывая два обещания promise1 и promise2, верните новое обещание. promise1 и promise2 оба будут разрешены с числом. Возвращаемое обещание должно соответствовать сумме двух чисел.
// Input:
const promise1 = new Promise((resolve) => setTimeout(() => resolve(2), 20));
const promise2 = new Promise((resolve) => setTimeout(() => resolve(5), 60));
// Output: 7
// Explanation: Два входных обещания разрешаются со значениями 2 и 5 соответственно. Возвращенное обещание должно разрешаться со значением 2 + 5 = 7. Время разрешения возвращенного обещания для этой проблемы не оценивается.